// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LiquidityPool extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LiquidityPool must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidityPool", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): LiquidityPool | null {
    return changetype<LiquidityPool | null>(
      store.get("LiquidityPool", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get kind(): string {
    let value = this.get("kind");
    return value!.toString();
  }

  set kind(value: string) {
    this.set("kind", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class LPPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LPPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LPPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LPPosition", id.toString(), this);
    }
  }

  static load(id: string): LPPosition | null {
    return changetype<LPPosition | null>(store.get("LPPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get lpAddress(): Bytes {
    let value = this.get("lpAddress");
    return value!.toBytes();
  }

  set lpAddress(value: Bytes) {
    this.set("lpAddress", Value.fromBytes(value));
  }

  get liquidityAmount(): BigInt {
    let value = this.get("liquidityAmount");
    return value!.toBigInt();
  }

  set liquidityAmount(value: BigInt) {
    this.set("liquidityAmount", Value.fromBigInt(value));
  }

  get xDeposit(): BigInt {
    let value = this.get("xDeposit");
    return value!.toBigInt();
  }

  set xDeposit(value: BigInt) {
    this.set("xDeposit", Value.fromBigInt(value));
  }

  get yDeposit(): BigInt {
    let value = this.get("yDeposit");
    return value!.toBigInt();
  }

  set yDeposit(value: BigInt) {
    this.set("yDeposit", Value.fromBigInt(value));
  }

  get xWithdrawn(): BigInt {
    let value = this.get("xWithdrawn");
    return value!.toBigInt();
  }

  set xWithdrawn(value: BigInt) {
    this.set("xWithdrawn", Value.fromBigInt(value));
  }

  get yWithdrawn(): BigInt {
    let value = this.get("yWithdrawn");
    return value!.toBigInt();
  }

  set yWithdrawn(value: BigInt) {
    this.set("yWithdrawn", Value.fromBigInt(value));
  }

  get closed(): boolean {
    let value = this.get("closed");
    return value!.toBoolean();
  }

  set closed(value: boolean) {
    this.set("closed", Value.fromBoolean(value));
  }
}
